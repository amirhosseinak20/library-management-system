<% content_for :styles do %>
  <style>
    .ui.grid > .row > .column {
      margin-bottom: 1rem !important;
    }

    .display-none {
      display: none !important;
    }

    .ui.fluid.card {
      height: 100%;
    }
  </style>
<% end %>
<div class="ui padded doubling stackable grid">
  <div class="ui row">
    <div class="ui four wide column">
      <div class="ui segment">
        <div class="ui search">
          <div class="ui left icon fluid input">
            <%= text_field_tag :search, params[:q], class: "prompt", placeholder: "Search books..." %>
            <i class="search icon"></i>
          </div>
          <div class="results"></div>
        </div>
      </div>
    </div>
    <div class="ui twelve wide column">
      <div class="ui clearing segment">
        <h1 class="ui left floated header" style="margin: 0;">Books</h1>
        <div class="ui right floated basic segment" style="margin: 0; padding: 0;">
          <div class="ui selection dropdown">
            <input type="hidden" name="order">
            <i class="dropdown icon"></i>
            <div class="default text">Order</div>
            <div class="menu">
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="ui row">
    <div class="ui four wide column">
    </div>
    <div class="ui twelve wide column">
      <div class="ui four column grid">
        <div class="ui row data-container">
        </div>
        <div class="ui row" style="justify-content: center;">
          <div class="ui pagination menu">
            <div class="item"><<</div>
            <div class="item">1</div>
            <div class="item">2</div>
            <div class="item">3</div>
            <div class="item">>></div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
    let data;
    let currentPage = <%= @pagination[:current_page] %>;
    let order = "<%= @pagination[:order] %>";
    const dataContainer = $(".data-container");
    const paginationItems = [
        $(".ui.pagination.menu .item:nth-child(1)"),
        $(".ui.pagination.menu .item:nth-child(2)"),
        $(".ui.pagination.menu .item:nth-child(3)"),
        $(".ui.pagination.menu .item:nth-child(4)"),
        $(".ui.pagination.menu .item:nth-child(5)"),
    ]
    const paginationMenu = $(".ui.pagination.menu");

    const card = (image, url, title, authors) => `
      <div class="column">
        <div class="ui fluid card">
          <div class="image">
            <img src="${image}" class="ui image" alt="cover" />
          </div>
          <div class="content">
            <a href="${url}">${_.truncate(title, {length: 24})}</a>
            <div class="meta">
              <h4 class="ui header" style="margin-top: 1rem;">${authors.length > 1 ? "Authors" : "Author"}</h4>
              <div class="ui list">
              ${authors.map(item => `
                    <a href="${item.url}" class="item">
                      <img class="ui avatar image" src="${item.avatar}" alt="avatar">
                      <div class="content">
                        <div class="description">
                          ${item.name}
                        </div>
                      </div>
                    </a>
                  `).join("")}
              </div>
          </div>
        </div>
      </div>
    `;

    async function getData(page = 1, orderBy = 'created_at-desc') {
        dataContainer.html("");

        // fetch request
        const options = {
            method: "GET",
            headers: new Headers({'content-type': 'application/json'}),
            mode: 'no-cors'
        };
        const res = await fetch(`/books?page=${page}&order_by=${orderBy}`, options);
        data = await res.json();

        // data rendering
        dataContainer.append(data["books"].map(item => card(item["image"], item["url"], item["title"], item["authors"])));
        currentPage = data["pagination"]["current_page"];
        order = data["pagination"]["order"];

        // resetting events
        if (data["pagination"]["last_page"] > 1) {
            paginationItems[1].text(data["pagination"]["current_page"] > 2 ? "..." : "1")
            paginationItems[2].text(data["pagination"]["current_page"] === 1 ? "2" : data["pagination"]["current_page"])
            paginationItems[3].text("...")
        } else {
            paginationMenu.style.display = "none"
        }
        if (currentPage <= 1) {
            paginationItems[0].addClass("disabled")
            paginationItems[1].addClass("disabled active")
            paginationItems[3].addClass("disabled")
        } else {
            paginationItems[0].removeClass("disabled")
            paginationItems[1].removeClass("disabled active")
            paginationItems[3].removeClass("disabled")
        }
        if (currentPage >= 2) {
            if (currentPage !== 2) {
                paginationItems[1].addClass("disabled")
            }
            paginationItems[2].addClass("disabled active")
            paginationItems[3].addClass("disabled")
        } else {
            paginationItems[1].removeClass("disabled")
            paginationItems[2].removeClass("disabled active")
            paginationItems[3].removeClass("disabled")
        }
        if (currentPage >= data["pagination"]["last_page"]) {
            paginationItems[3].addClass("disabled display-none")
            paginationItems[4].addClass("disabled")
        } else {
            paginationItems[3].removeClass("disabled")
            paginationItems[4].removeClass("disabled")
        }
    }

    function initEvents() {
        $(".ui.dropdown").dropdown({
            onChange: () => {
                getData(currentPage, order)
            },
            values: [
                {
                    name: 'Newest',
                    value: 'created_at-desc',
                    selected: 'created_at-desc' === order
                },
                {
                    name: 'Oldest',
                    value: 'created_at-asc',
                    selected: 'created_at-asc' === order
                }
            ]
        })
        paginationItems[0].click((e) => {
            e.preventDefault();
            getData(currentPage - 1)
        });
        paginationItems[1].click((e) => {
            e.preventDefault();
            getData(Number.parseInt(paginationItems[1].text()))
        });
        paginationItems[2].click((e) => {
            e.preventDefault();
            getData(currentPage === 1 ? 2 : currentPage)
        });
        paginationItems[3].click((e) => {
            e.preventDefault();
            getData(currentPage + 1)
        });
        paginationItems[4].click((e) => {
            e.preventDefault();
            getData(currentPage + 1)
        });
    }

    document.addEventListener("turbolinks:load", (event) => {
        event.preventDefault();
        getData(currentPage)
    })
    document.addEventListener("turbolinks:load", initEvents)
</script>